#!/usr/bin/env node
var config = require('../config');
var prompt = require('prompt');
var MongoClient = require('mongodb').MongoClient;


var schema = {
    properties: {
        name: {
            description: 'Entity name',
            type: 'string',
            required: true
        },
        url: {
            description: 'Entity url',
            type: 'string',
            pattern: /^[a-z0-9_-]+$/,
            message: 'URL must be alphanumerical and/or hyphen/underscore.',
            required: true
        },
        logo_url: {
            description: 'Entity logo',
            type: 'string',
            pattern: /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/,
            required: true
        },
        intro: {
            description: 'Introduction',
            type: 'string',
            required: true
        },
        alipay_account: {
            description: 'Alipay account',
            type: 'string',
            message: 'Alipay account is Email or Phone number.',
            required: true
        },
        alipay_qrcode: {
            description: '(Optional) Alipay QR code url',
            type: 'string'
            // pattern: /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/
        },
        paypal: {
            description: '(Optional) Paypal account',
            type: 'string',
            message: 'Paypal account is Email.'
        },
        unionpay_id: {
            description: '(Optional) Unionpay Card ID',
            type: 'string',
            message: ''
        },
        unionpay_bank: {
            description: '(Optional) Unionpay Card Bank',
            type: 'string',
            message: ''
        },
        unionpay_name: {
            description: '(Optional) Unionpay Card Name',
            type: 'string',
            message: ''
        }
    }
};

//
// Start the prompt
//
prompt.start();

//
// Get two properties from the user: email, password
//
prompt.get(schema, function (err, result) {
    console.log('Information collected. Saving to database...');
    // console.log(result);


    MongoClient.connect(config.mongodb, { db: { native_parser: true, w : 1 } }, function(err, db) {
        if (err) {
            throw err;
        }

        var collection = db.collection('entity');

        collection.findOne({
            url: result.url
        }, function(err, doc) {
            if (doc) {
                throw result.url + ' already exists.';
            } else {
                collection.insert({
                    org: result.name,
                    url: result.url,
                    logo_url: result.logo_url,
                    intro: result.intro,
                    payments: {
                        alipay_account: result.alipay_account,
                        alipay_qrcode: result.alipay_qrcode || '',
                        paypal: result.paypal || '',
                        unionpay: {
                            id: result.unionpay_id,
                            bank: result.unionpay_bank,
                            name: result.unionpay_name
                        } || ''
                    }
                }, {
                    safe: true
                }, function(err) {
                    if (err) {
                        throw err;
                    }
                    collection.ensureIndex({
                        url: 1
                    }, function(err) {
                        if (err) {
                            throw err;
                        }
                        console.log('Operation completed successfully.');
                        process.exit(0);
                    });
                });
            }
        });
    });
});
